/*
 * pwm.c
 *
 * Created: 2015-07-05 5:39:37 PM
 *  Author: KEVIN
 */ 
//RIGHT MOTOR
/*
	PB3	|	PB2	|
    -------------------------
	IN1	|	IN2	|	Operation
	-------------------------
	1	|	1	|	OFF
	-------------------------
	PWM	|	PWM	|	FWD
	-------------------------
	PWM	|	1	|	BWD
*/
//LEFT MOTOR
/*
	PB4	|	PB1	|
    -------------------------
	IN1	|	IN2	|	Operation
	-------------------------
	1	|	1	|	OFF
	-------------------------
	PWM	|	PWM	|	FWD
	-------------------------
	PWM	|	1	|	BWD
*/

#define F_CPU 14745600UL
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdio.h>
#include <stdlib.h>

static int uart_putchar(char c, FILE *stream);
static int uart_getchar(FILE *stream);
FILE mystdout = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

static int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
	UDR0 = c;
	return 0;
}
static int uart_getchar(FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
	return UDR0;
}
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
	UBRR0 = 7;
	stdout = &mystdout;
	stdin = &mystdin;
}

void pwm_init(void);

void pwm_FWD();
void pwm_BWD(int speed);

void pwm_BRAKE(void);

void pwm_LEFT_90(int speed);
void pwm_RIGHT_90(int speed);

void R_BRAKE(void);
void R_MOTOR_CW(int speed);
void L_MOTOR_CW(int speed);

void L_BRAKE(void);
void R_MOTOR_CCW(int speed);
void L_MOTOR_CCW(int speed);


#define FAST 200
#define NORMAL 150
#define SLOW 128

//FUNCTIONS
void pwm_init(void)
{
	//setting PORTB as output
	//DDRB |= (_BV(PB2) | _BV(PB3));					//RIGHT MOTOR	
	//DDRB |= (_BV(PB1) | _BV(PB4));					//LEFT MOTOR							

	DDRD |= (_BV(PB4) | _BV(PB5));
	DDRD |= (_BV(PB6) | _BV(PB7));
	//_BV(PB1| _BV(PB4));												
	//DDRB |=_BV(PB1)|_BV(PB2);												
	
	//PORTB = 0xFF;															//initialized PORTB all zeros		//don't you mean 1's?
	PORTD = 0xFF;
	//set duty cycle
	OCR2A = 128;										// PB3	RIGHT												
	OCR2B = 129;										// PB4	LEFT
	
	TCCR2A |= _BV(COM2A0)|_BV(COM2A1)| _BV(WGM20) |_BV(COM2B1)|_BV(COM2B0);	//phase correct pwm; inverting
    TCCR2B = 1<<CS21;														//pre-scaler of 8 
}

void pwm_FWD()
{
	//set duty cycle
	OCR2A = 128;										// PB3	RIGHT																						
	OCR2B = 129;
	OCR2A = 129;										// PB3	RIGHT
	OCR2B = 128;										// PB4	LEFT	
	//PORTB |=(_BV(PB2));
	//PORTB |=(_BV(PB1));
	PORTD |=(_BV(PB5));
	PORTD |=(_BV(PB4));
}
void pwm_BWD(int speed)
{
	//set duty cycle
	OCR2A = speed;										// PB3	RIGHT	
	OCR2B = speed;										// PB4	RIGHT										
	PORTD &= ~(1<<PB5);								
	PORTD &= ~(1<<PB4);
}

void pwm_BRAKE(void)
{
	//set duty cycle
	OCR2A = 0;															
	OCR2B = 0;
	PORTD |=(1<<PB5);  //(1<<PB2)
	PORTD |=(1<<PB4);  //(1<<PB1)
}

void pwm_LEFT_90(int speed)
{
	//set duty cycle
	OCR2A = 0;
	OCR2B = speed;
	PORTD |= (1<<PB5);
	PORTD |= (1<<PB4);
}
void pwm_RIGHT_90(int speed)
{
	//set duty cycle
	OCR2B = 0;
	OCR2A  = speed;
	PORTD |= (1<<PB5);
	PORTD |= (1<<PB4);
}

void R_BRAKE()
{
	OCR2A = 0;
	PORTD |=(1<<PB5);								// PB2	RIGHT (speed)	
}
void R_MOTOR_CW(int speed)
{
	OCR2A = speed;									//PWM
	PORTD |=(1<<PB5);
}
void R_MOTOR_CCW(int speed)
{
	OCR2A = speed;									//PWM
	PORTD &= ~(1<<PB5);
}

void L_BRAKE()
{
	OCR2B = 0;
	PORTD |=(1<<PB4);
}
void L_MOTOR_CW(int speed)
{
	OCR2B = speed;
	PORTD |= (1<<PB4);
}
void L_MOTOR_CCW(int speed)
{
	OCR2B = speed;	
	PORTD &= ~(1<<PB4);
}

//MAIN
int main(void)
{
	int speed = 120;
	init_uart();
	printf(("System Booted, built %s on %s\n"), __TIME__, __DATE__);
	_delay_ms(3000);
	
	pwm_init();
	_delay_ms(2000);
	//pwm_FWD();
	_delay_ms(10000);
	pwm_BRAKE();
	printf("Complete \n");
	_delay_ms(2000);
	
	
	//RIGHT MOTOR TEST
	printf("BEGIN! \n");
	R_BRAKE();
	_delay_ms(3000);
	
	R_MOTOR_CW(speed);
	_delay_ms(3000);
	
	R_BRAKE();
	_delay_ms(3000);
	
	R_MOTOR_CCW(speed);
	_delay_ms(3000);
	
	R_BRAKE();
	_delay_ms(3000);
	
	//LEFT MOTOR TEST
	printf("BEGIN! \n");
	L_BRAKE();
	//_delay_ms(3000);
	
	L_MOTOR_CW(speed);
	_delay_ms(3000);
	
	L_BRAKE();
	_delay_ms(3000);
	
	L_MOTOR_CCW(speed);
	_delay_ms(3000);
	
	L_BRAKE();
	_delay_ms(3000);
	
	//FORWARD TEST
	printf("BEGIN! \n");
	pwm_BRAKE();
	printf("SLOW \n");
	_delay_ms(3000);
	pwm_FWD(speed = SLOW);
	_delay_ms(3000);
	pwm_BRAKE();
	printf("NORMAL \n");
	_delay_ms(3000);
	pwm_FWD(speed = NORMAL);
	_delay_ms(3000);
	pwm_BRAKE();
	printf("FAST \n");
	_delay_ms(3000);
	pwm_FWD(speed = FAST);
	_delay_ms(3000);
	pwm_BRAKE();
	_delay_ms(3000);
	
	//BACKWARD TEST
	printf("BEGIN! \n");
	printf("bRAKING \n");
	pwm_BRAKE();
	_delay_ms(3000);
	
	printf("BACKWARD \n");
	pwm_BWD(speed = NORMAL);
	_delay_ms(3000);
	
	printf("BRAKE \n");
	pwm_BRAKE();
	_delay_ms(3000);

	
	//RIGHT 90
	//LEFT 90

	//BRAKE
	/*//setting pb1 and 2 HIGH
	OCR0A = 0;
	OCR0B = 0;
	PORTB |=(1<<PB2);								// PB2	RIGHT (speed)						
	PORTB |=(1<<PB1);								// PB1	LEFT (speed)
	_delay_ms(5000);*/
	//RIGHT MOTOR CCW
	/*OCR0A = 128;									// PB3	RIGHT (speed)
	OCR0B = 128;									// PB4	LEFT(speed)
	//seting pb1 and 2 LOW
	PORTB &= ~(1<<PB2);									// PB3
	PORTB &= ~(1<<PB1);
	_delay_ms(10000);*/									
	//BRAKE
	/*//_delay_ms(5000);
	OCR0A = 0;											// PB3	RIGHT (speed)
	//OCR0B = 0;											// PB4	Left (speed)
	PORTB |=(1<<PB2);
	//PORTB |=(1<<PB1);
	//_delay_ms(5000);*/
	
	while(1);
}
